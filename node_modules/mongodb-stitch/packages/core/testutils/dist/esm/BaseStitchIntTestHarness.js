var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import BSON from "bson";
import fetch from "fetch-everywhere";
import { StitchAdminClient } from "mongodb-stitch-core-admin-client";
import { UserApiKeyAuthProvider, UserPasswordCredential } from "mongodb-stitch-core-sdk";
jest.setTimeout(30000);
var BaseStitchIntTestHarness = (function () {
    function BaseStitchIntTestHarness() {
        this.groupId = "";
        this.apps = [];
        this.initialized = false;
        this.adminClient = new StitchAdminClient(this.stitchBaseUrl);
    }
    BaseStitchIntTestHarness.prototype.setup = function () {
        var _this = this;
        return fetch(this.stitchBaseUrl)
            .then(function (result) {
            return _this.adminClient.loginWithCredential(new UserPasswordCredential("unique_user@domain.com", "password"));
        })
            .then(function (result) { return _this.adminClient.adminProfile(); })
            .then(function (profile) {
            _this.groupId = profile.roles[0].groupId;
            _this.initialized = true;
        })
            .catch(function (e) {
            throw new Error("Expected Stitch server to be available at '" + _this.stitchBaseUrl + "': " + e.message);
        });
    };
    BaseStitchIntTestHarness.prototype.teardown = function () {
        var _this = this;
        if (!this.initialized) {
            return Promise.resolve();
        }
        return Promise.all(this.apps.map(function (app) {
            app.remove();
        })).then(function () {
            _this.adminClient.logout();
            _this.adminClient.close();
        });
    };
    BaseStitchIntTestHarness.prototype.createApp = function (appName) {
        if (appName === void 0) { appName = "test-" + new BSON.ObjectID().toHexString(); }
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2, this.adminClient
                        .apps(this.groupId)
                        .create(appName)
                        .then(function (appInfo) {
                        var app = _this.adminClient.apps(_this.groupId).app(appInfo.id);
                        _this.apps.push(app);
                        return [appInfo, app];
                    })];
            });
        });
    };
    BaseStitchIntTestHarness.prototype.addProvider = function (app, config) {
        return __awaiter(this, void 0, void 0, function () {
            var authProviders;
            return __generator(this, function (_a) {
                return [2, app.authProviders
                        .create(config)
                        .then(function (resp) {
                        authProviders = resp;
                        return app.authProviders.authProvider(resp.id).enable();
                    })
                        .then(function () { return authProviders; })];
            });
        });
    };
    BaseStitchIntTestHarness.prototype.enableApiKeyProvider = function (app) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, app.authProviders.list().then(function (responses) {
                        var apiKeyProvider = responses.find(function (it) { return it.name === UserApiKeyAuthProvider.DEFAULT_NAME; });
                        return app.authProviders.authProvider(apiKeyProvider.id).enable();
                    })];
            });
        });
    };
    BaseStitchIntTestHarness.prototype.addService = function (app, type, config) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, app.services.create(config).then(function (svcInfo) {
                        var svc = app.services.service(svcInfo.id);
                        return [svcInfo, svc];
                    })];
            });
        });
    };
    BaseStitchIntTestHarness.prototype.addRule = function (svc, config) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, svc.rules.create(config)];
            });
        });
    };
    return BaseStitchIntTestHarness;
}());
export default BaseStitchIntTestHarness;
//# sourceMappingURL=BaseStitchIntTestHarness.js.map