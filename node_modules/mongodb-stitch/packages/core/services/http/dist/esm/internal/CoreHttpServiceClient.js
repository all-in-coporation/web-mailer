import { HttpMethod } from "../HttpMethod";
import ResultDecoders from "./ResultDecoders";
var RequestAction;
(function (RequestAction) {
    RequestAction["GetAction"] = "get";
    RequestAction["PostAction"] = "post";
    RequestAction["PutAction"] = "put";
    RequestAction["DeleteAction"] = "delete";
    RequestAction["HeadAction"] = "head";
    RequestAction["PatchAction"] = "patch";
    RequestAction["HttpUrlParam"] = "url";
    RequestAction["HttpAuthUrlParam"] = "authUrl";
    RequestAction["HttpHeadersUrlParam"] = "headers";
    RequestAction["HttpCookiesParam"] = "cookies";
    RequestAction["HttpBodyParam"] = "body";
    RequestAction["HttpEncodeBodyAsJsonParam"] = "encodeBodyAsJSON";
    RequestAction["HttpFormParam"] = "form";
    RequestAction["HttpFollowRedirectsParam"] = "followRedirects";
})(RequestAction || (RequestAction = {}));
var CoreHttpServiceClient = (function () {
    function CoreHttpServiceClient(service) {
        this.service = service;
        this.service = service;
    }
    CoreHttpServiceClient.prototype.execute = function (request) {
        var action;
        switch (request.method) {
            case HttpMethod.GET:
                action = RequestAction.GetAction;
                break;
            case HttpMethod.POST:
                action = RequestAction.PostAction;
                break;
            case HttpMethod.PUT:
                action = RequestAction.PutAction;
                break;
            case HttpMethod.DELETE:
                action = RequestAction.DeleteAction;
                break;
            case HttpMethod.HEAD:
                action = RequestAction.HeadAction;
                break;
            case HttpMethod.PATCH:
                action = RequestAction.PatchAction;
                break;
            default:
                throw new Error("unknown method " + request.method);
        }
        var args = {};
        args[RequestAction.HttpUrlParam] = request.url;
        if (request.authUrl !== undefined) {
            args[RequestAction.HttpAuthUrlParam] = request.authUrl;
        }
        if (request.headers !== undefined) {
            args[RequestAction.HttpHeadersUrlParam] = request.headers;
        }
        if (request.cookies !== undefined) {
            args[RequestAction.HttpCookiesParam] = request.cookies;
        }
        if (request.body !== undefined) {
            args[RequestAction.HttpBodyParam] = request.body;
        }
        if (request.encodeBodyAsJson !== undefined) {
            args[RequestAction.HttpEncodeBodyAsJsonParam] = request.encodeBodyAsJson;
        }
        if (request.form !== undefined) {
            args[RequestAction.HttpFormParam] = request.form;
        }
        if (request.followRedirects !== undefined) {
            args[RequestAction.HttpFollowRedirectsParam] = request.followRedirects;
        }
        return this.service.callFunction(action, [args], ResultDecoders.HttpResponseDecoder);
    };
    return CoreHttpServiceClient;
}());
export default CoreHttpServiceClient;
//# sourceMappingURL=CoreHttpServiceClient.js.map