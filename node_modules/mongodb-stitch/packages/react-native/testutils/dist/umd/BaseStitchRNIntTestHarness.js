var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "mongodb-stitch-core-testutils", "mongodb-stitch-react-native-core"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var mongodb_stitch_core_testutils_1 = require("mongodb-stitch-core-testutils");
    var mongodb_stitch_react_native_core_1 = require("mongodb-stitch-react-native-core");
    var stitchBaseUrlEnvVar = "STITCH_BASE_URL";
    var BaseStitchRNIntTestHarness = (function (_super) {
        __extends(BaseStitchRNIntTestHarness, _super);
        function BaseStitchRNIntTestHarness() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.clients = [];
            return _this;
        }
        BaseStitchRNIntTestHarness.prototype.setup = function () {
            return _super.prototype.setup.call(this);
        };
        BaseStitchRNIntTestHarness.prototype.teardown = function () {
            var _this = this;
            return _super.prototype.teardown.call(this).then(function () {
                return Promise.all(_this.clients.map(function (it) {
                    it.auth.logout();
                    it.close();
                }));
            }).then(function () { return; });
        };
        Object.defineProperty(BaseStitchRNIntTestHarness.prototype, "stitchBaseUrl", {
            get: function () {
                var envVar = process.env[stitchBaseUrlEnvVar];
                return envVar !== undefined ? envVar : "http://localhost:9090";
            },
            enumerable: true,
            configurable: true
        });
        BaseStitchRNIntTestHarness.prototype.getAppClient = function (app) {
            var _this = this;
            if (mongodb_stitch_react_native_core_1.Stitch.hasAppClient(app.clientAppId)) {
                return Promise.resolve(mongodb_stitch_react_native_core_1.Stitch.getAppClient(app.clientAppId));
            }
            return mongodb_stitch_react_native_core_1.Stitch.initializeAppClient(app.clientAppId, new mongodb_stitch_react_native_core_1.StitchAppClientConfiguration.Builder()
                .withBaseUrl(this.stitchBaseUrl)
                .build()).then(function (client) {
                _this.clients.push(client);
                return client;
            });
        };
        BaseStitchRNIntTestHarness.prototype.registerAndLoginWithUserPass = function (app, client, email, pass) {
            return __awaiter(this, void 0, void 0, function () {
                var emailPassClient;
                return __generator(this, function (_a) {
                    emailPassClient = client.auth.getProviderClient(mongodb_stitch_react_native_core_1.UserPasswordAuthProviderClient.factory);
                    return [2, emailPassClient
                            .registerWithEmail(email, pass)
                            .then(function () { return app.userRegistrations.sendConfirmation(email); })
                            .then(function (conf) { return emailPassClient.confirmUser(conf.token, conf.tokenId); })
                            .then(function () {
                            return client.auth.loginWithCredential(new mongodb_stitch_react_native_core_1.UserPasswordCredential(email, pass));
                        })
                            .then(function (user) { return user.id; })];
                });
            });
        };
        return BaseStitchRNIntTestHarness;
    }(mongodb_stitch_core_testutils_1.BaseStitchIntTestHarness));
    exports.default = BaseStitchRNIntTestHarness;
});
//# sourceMappingURL=BaseStitchRNIntTestHarness.js.map